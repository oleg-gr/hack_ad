<!DOCTYPE html>
<html>
<head>
    <link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">
    <script src="/javascripts/jquery-1.9.1.min.js"></script>
    <script src="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
    <script src="/javascripts/index.js"></script>
    <link href="//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-responsive.min.css" rel="stylesheet">
    <link href="/stylesheets/style.css" rel="stylesheet">
    <link href="../public/stylesheets/style.css" rel="stylesheet">
    <link href="../public/stylesheets/bootstrap.css" rel="stylesheet">
    <link href='http://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400' rel='stylesheet' type='text/css'>
    <title>DisCoS</title>
</head>
<body data-spy="scroll" data-target="#navbar" data-offset=30>
<div id="navbar" class="navbar navbar-fixed-top">
  <div class="navbar-inner">
    <div class="container-fluid">
        <a class="brand" href="/">DisCoS</a>
        <div class="nav-collapse collapse">
            <ul class="nav">
              <li><a href="#home">Home</a></li>
              <li><a href="#about">About</a></li>
              <li><a href="#idea">The Idea</a></li>
              <li><a href="#method">The Method</a></li>
              <li><a href="#implementation">The Implementation</a></li>
            </ul>
              <a class="nav-button btn btn-success pull-right" href="/use/robo"> Connect to DisCoS</a>
        </div>
    </div>
  </div>
</div>
<div id="body">
  <div class="container-fluid content">
    <div id="home" class="row-fluid divider">
      <div class="span6">
        <img id="header-img" class="pull-right" src="/images/Disco_logo_untagged.png" />
      </div>
      <div class="span6 taglines">
          <h3 class="text-align"> Distributed Intelligence. </h3>
          <h3 class="text-align"> Send Missions, Not Commands.</h3>
          <h3 class="text-align"> Push Robots, Not Pixels.</h3>
      </div>
    </div>
    <div class="row-fluid divider">
      <div class="span8 offset2 box bordered">
        <p>
        <strong>DisCoS</strong> (Distributed Control System) is a framework for creating distributive intelligence within any group of networked devices. Its innovation comes from the idea of sending missions rather than commands. The <strong>master</strong> distributes dynamically generated high level programs that it sends throughout the network to <strong>controllers</strong>, in a sense, distributing partial autonomy and intelligence throughout the system whilst maintaing full centralized control. This is made possible by the <strong>.bot</strong> programming language we created specifically for DisCoS. We demonstrate one implementation of a full DisCoS system in creating the <strong>TNT</strong> learning & robotics platform, giving students the ability to write live code and dynamic programs that are immediately interpreted and run on Lego NXT rovers on the fly.
        </p>
      </div>
    </div>
    <div class="row-fluid divider">
      <div class="connect span6 box bordered">
        <h3 class="text-center" >Watch the demo!</h3>
        <div class="video-container">
          <iframe class="center" width="504" height="283" src="http://www.youtube.com/embed/muxXGI9fNek" frameborder="0" allowfullscreen></iframe>
        </div>
      </div>
      <div class="connect span6 box bordered">
        <h3 class="text-center">Try it out!</h3>
        <p>We've built the TNT <strong>learning and robotics platform</strong> as a first implementatoin of DisCoS.</p>
        <p>With only a browser, connect to our <strong>Lego NXT rovers</strong> and solve challenges by writing live code. We've developed the TNT (Turtle Not Turtle) programming language, which is optimized for rapidly developing powerful robotics programs.</p>
        <p>TNT is a full DisCoS system where the <strong>user serves as the Master</strong> (controlling many rovers at a time), <strong>Android devices serve as Controllers</strong> (talking to the Master via. wifi and the Platforms via. bluetooth), and the <strong>NXT rovers serve as the Platforms</strong>. Code is compiled from TNT into .bot on browser, and sent as a JSON package to the Android device, which executes the code in a Java virtual machine and sends relevant commands to the NXT rover.</p>
        <center><a id="connect-btn" class="btn btn-success btn-large btn-primary" href="/use/robo">Connect to DisCoS</a>
      </div>
    </div>
  </div>
  <div id="about" class="section-divider" >
    <div class="container-fluid about">
      <h1 class="row-text text-center">ABOUT</h1>
    </div>
  </div>
  <div class="container-fluid content">
    <div  class="row-fluid divider">
      <div class="span4 box bordered description">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h3 class="text-center"> Idea </h3>
          </div>
          <div class="row-fluid gap divider-small">
            <a href-"#idea"><img class="center description-img" src="/images/Disco_logo.png" /></a>
          </div>
          <div class="row-fluid">
            <h4>Distributed Autonomy</h4></br>
            <h4>Generality</h4> </br>
            <h4>RESTful</h4> </br>
            	
          </div>
        </div>
      </div>
      <div class="span4 box bordered description">
        <div class="container-fluid">
          <div class="row-fluid divider-small ">
            <h3 class="text-center"> Method </h3>
          </div>
          <div class="row-fluid gap divider-small">
            <a href="#method"><img id="dotbot" class="center description-img" src="/images/Dot_bot_logo.png" /></a>
          </div>
          <div class="row-fluid">
            <h4>Turing Complete</h4> </br>
            <h4>Virtual Machine</h4> </br>
            <h4>JSON</h4> </br>
          </div>
        </div>
      </div>
      <div class="span4 box bordered description">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h3 class="text-center"> Implementation </h3>
          </div>
          <div class="row-fluid gap divider-small">
            <a href="#implementation"><img class="center description-img" src="/images/TNT_logo.png" /></a>
          </div>
          <div class="row-fluid">
            <h4>Push robots, not pixels</h4> </br>
            <h4>TNT Not Turtle</h4> </br>
            <h4>Write Anywhere</h4> </br>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="idea" class="section-divider" >
    <div class="container-fluid">
      <h1 class="row-text text-center">THE IDEA</h1>
    </div>
  </div>
 <div class="container-fluid content">
    <div  class="row-fluid">
      <div class="span8 offset2 box">
        <img class="center img-large" src="/images/Disco_logo.png" />
      </div>
    </div>
    <div class="row-fluid">
      <div class="span12 box bordered">
        <p>
          The DisCoS framework aims to create more powerful <strong>collective robotics systems</strong> by distributing computation and autonomy throughout the network. In a traditional master/slave system, the master micromanages every device. In DisCoS, the Master instead dynamically generates full programs, which are computed throughout the network, leaving micromanagement, and device-specific interfaces to the Controller. This allows the Master to focus solely on high level missions. The end result is a highly optimized, flexible and powerful <strong>collective intelligence network</strong>. 
        </p>
        <p>
          DisCoS devices operate at one of three levels. At the top is the <strong>Master (i.e. a server)</strong>, which has complete information of the network and as well as any relevant information from the individual devices in the network. Underneath are the <strong>Controllers (i.e. an Android device)</strong>, which execute programs run by the master which execute programs run by the master. At the bottom are <tsrong>Platforms (i.e. a rover)</strong>, the workers in the system that actuate DisCoS missions.
        </p>
        <p>
        The Master receives only relevant and <strong>necessary information</strong> from the controllers throughout the network. It makes decisions on how the network should respond, and sends these throughout the network as missions. These missions can be complex, such as a full maze solver. Controllers receive these missions as .bot programs and see them through to completion by <strong>micromanaging platforms</strong>. Most information (i.e. sensor data) required to complete these missions are sent only between the Controller and Platform, and only required information is sent back up to the Master. The Platforms interfaces with the Controller through a device specific driver, obeying <strong>direct commands</strong> from the Controller.
        </p>
      </div>
    </div>
    <div class="row-fluid divider">
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> Distributed Autonomy</h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/DSC_graphic_8.png" />
          </div>
            <p> The master sends missions, not commands. The master is free to operate only at high levels, leaving controllers to micromanage platforms and to complete individual missions. </p>
          </div>
        </div>
      </div>
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> Generality </h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/DSC_graphic_6 (1).png" />
          </div>
            <p>DisCoS can be implemented with any system of networked devices. Because .bot implements only abstracted high level commands, everything from lightbulbs to rovers can be networked together. </p>
          </div>
        </div>
      </div>
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small">RESTful</h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/DSC_graphic_7.png" />
          </div>
            <p>No proprietary network protocols or encoding. The entire DisCoS system communicates through HTTP get and post requests, and all messages and .bot programs are JSON objects.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="method" class="section-divider" >
    <div class="container-fluid">
      <h1 class="row-text text-center">THE METHOD</h1>
    </div>
  </div>
 <div class="container-fluid content">
    <div  class="row-fluid">
      <div class="span8 offset2 box">
        <img id="img2" class="center" src="/images/Dot_bot_logo.png" />
      </div>
    </div>
    <div class="row-fluid">
      <div class="span12 box bordered">
        <p>
        .bot is a turing complete, functional programming language we created in order to make DisCoS possible. <strong>Expressed entirely in JSON,</strong> .bot allows entire programs to be sent using <strong>RESTful APIs</strong> on which DisCoS is built. We created a virtual machine to interpret .bot code, written in Java - allowing any Java capable device (including all android devices) to be able to execute .bot code and act as a controller in the DisCoS system.
        </p>
        <p>
        .bot code includes only high level functions that are consistent across devices (such as move forward, check distance in front, etc). The controller simply pings the master to let it know which functions are available, and the master can then <strong>write entire programs</strong> for the platform without needing any knowledge of the actual implementation. The controller contains a driver that implements low level hardware functions (such as move forward), and that these be passed to our compiler, which is simply a Java Object. This allows code to be run virtually, and thus, bad code will <strong>never crash</strong> any software. Code can be paused, stopped, and reflashed all on the fly.
        </p>
      </div>
    </div>
    <div class="row-fluid divider">
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> Turing Complete</h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/Dotbot_graphic_3.png" />
          </div>
            <p> .bot is a full turing complete, interpreted, functional programming language. It has complete support for function definitions, recursion, loops, conditionals, common mathematical operations. Functions are first-class citizens.</p>
          </div>
        </div>
      </div>
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> Virtual Machine </h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/Dotbot_graphic_2.png" />
          </div>
            <p>We wrote a virtual machine in Java to compile .bot code. This allows it to run on its own thread on any Java capable device (such as Androids), without the risk of crashing the software on the device in the event of bad code. Also, code can be paused, stopped and reflashed instantly. </p>
          </div>
        </div>
      </div>
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> JSON </h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/Dotbot_graphic_1.png" />
          </div>
            <p>All .bot programs can be expressed entirely in Javascript Object Notation. This allows programs to be compact, readable, and easily sent using only RESTful HTTP protocols on which DisCoS is built.</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="implementation" class="section-divider" >
    <div class="container-fluid">
      <h1 class="row-text text-center">THE IMPLEMENTATION</h1>
    </div>
  </div>
 <div class="container-fluid content">
    <div  class="row-fluid">
      <div class="span8 offset2 box">
        <img class="center img-large" src="/images/TNT_logo.png" />
      </div>
    </div>
    <div class="row-fluid">
      <div class="span12 box bordered">
        <p>
        <strong>TNT</strong>, which stands for "TNT Not Turtle", is an educational learning and robotics platform. We created the TNT programming language, which is inspired by simply python/ruby syntax and the philosophy of the Logo (Turtle) class of languages, which were created at MIT in the 1970s. We built an <strong>IDE and compiler</strong> for TNT in javascript, and it will run in any modern web browser. Hence, our audience is as broad as possible, as anyone with a web browser can utilize the TNT learning platform.
        </p>
        <p>
        On the TNT platform, the user/student serves as the Master in a DisCoS system. We networked several android devices as Controllers, which constantly communicate with our web server. Each Android is paired via bluetooth to a Lego NXT Rover. The user is presented with <strong>several challenges</strong> (solving mazes / puzzles), and they are challenged with writing programs for the NXT Rovers, <strong>controlling one or several</strong> at a time, in order to solve these challenges. They can also write step by step commands (such as forward(2) ), which will be <strong>immediately executed</strong> by the rover. We believe that this is an effective educational approach to engage students and get them excited about computer science / engineering / robotics, as they can see a rover moving in front of them. Our motto is <strong>"push robots, not pixels"</strong>.
        </p>
        <p>
        Simple TNT programs are compiled in the browser to <strong>.bot JSON objects</strong>, which are pushed to our server and sent to the relevant Controllers. Because .bot is interpreted in a <strong>virtual machine</strong>, there is no worry about bad code crashing the software, nor does the student need to worry about compiling / drivers. In fact, </strong>the student need not even own an actual NXT device</strong> (which can be pricey), as they can watch their rover perform challenges over a live webcam feed. Thus, anyone with a web browser is able to jump on the TNT learning platform and <strong>start writing code instantly</strong>.
        </p>
      </div>
    </div>
    <div class="row-fluid divider">
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> Push Robots, Not Pixels </h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/TNT_graphic_2.png" />
          </div>
            <p>See results as you type. A simple fd(2) command will send the rover moving forward for 2 seconds. </p>
          </div>
        </div>
      </div>
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small"> TNT Not Turtle</h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/TNT_graphic_3.png" />
          </div>
            <p>Based off MIT Turtle and inspired by python / ruby, TNT strips away complexities and let's you focus on logic whilst still being a  complete programming language. TNT supports variables, threading, functions, loops, and conditionals.  </p>
          </div>
        </div>
      </div>
      <div class="span4 box bordered explanation description-large">
        <div class="container-fluid">
          <div class="row-fluid divider-small">
            <h2 class="text-center gap-small">Code Anywhere</h2>
          <div class="row-fluid divider-small">
            <img class="center description-img" src="/images/TNT_graphic_1.png" />
          </div>
            <p>We've built both the the compiler and IDE (with syntax checking and indentation) in javascript. Therefore, all the code can be written and compiled from any modern browser. No downloads or expensive equipment are required to use TNT!</p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <br/>
  <br/>
  <br/>
</div>

<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-39965374-3', 'herokuapp.com');
  ga('send', 'pageview');

</script>
</body>
</html>


